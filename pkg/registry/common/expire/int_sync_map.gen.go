// Code generated by "go-syncmap -output int_sync_map.gen.go -type intMap<string,*int32>"; DO NOT EDIT.

package expire

import "sync"

func _() {
	// An "cannot convert intMap literal (type intMap) to type sync.Map" compiler error signifies that the base type have changed.
	// Re-run the go-syncmap command to generate them again.
	_ = (sync.Map)(intMap{})
}
func (m *intMap) Store(key string, value *int32) {
	(*sync.Map)(m).Store(key, value)
}

func (m *intMap) LoadOrStore(key string, value *int32) (*int32, bool) {
	actual, loaded := (*sync.Map)(m).LoadOrStore(key, value)
	if actual == nil {
		return nil, loaded
	}
	return actual.(*int32), loaded
}

func (m *intMap) Load(key string) (*int32, bool) {
	value, ok := (*sync.Map)(m).Load(key)
	if value == nil {
		return nil, ok
	}
	return value.(*int32), ok
}

func (m *intMap) Delete(key string) {
	(*sync.Map)(m).Delete(key)
}

func (m *intMap) Range(f func(key string, value *int32) bool) {
	(*sync.Map)(m).Range(func(key, value interface{}) bool {
		return f(key.(string), value.(*int32))
	})
}
